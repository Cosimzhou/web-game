(function() {
  var exports = window || {};

  function Pixel() {
    this._alive = false;
    this._count = 0;
  }
  Pixel.prototype.alive = function() {
    return 2 <= this._count && this._count <= 3;
  }
  Pixel.prototype.radioact = function(spc, x, y) {
    x = parseInt(x);
    y = parseInt(y);
    spc.spot(x - 1, y - 1);
    spc.spot(x - 1, y);
    spc.spot(x - 1, y + 1);
    spc.spot(x, y - 1);
    spc.spot(x, y + 1);
    spc.spot(x + 1, y - 1);
    spc.spot(x + 1, y);
    spc.spot(x + 1, y + 1);
  }


  function Space() {
    this._sandbox = new Map();
    this.alive_func = this._idle;
    this._generation = 0;
  }
  exports.Space = Space;

  Space.prototype._idle = function(x, y) {}
  Space.prototype.get = function(x, y) {
    var pxls = this._sandbox[x];
    if (pxls == null) {
      this._sandbox[x] = pxls = new Map();
    }

    var pxl = pxls[y];
    if (pxl == null) {
      pxls[y] = pxl = new Pixel();
    }
    return pxl;
  }

  Space.prototype.put = function(x, y) {
    var pxl = this.get(x, y);
    pxl._count = 0;
    pxl._alive = true;
    this.alive_func(x, y);
  }

  Space.prototype.set = function(array, ox = 0, oy = 0) {
    for (var pt of array) {
      this.put(pt[0] + ox, pt[1] + oy);
    }
  }

  Space.prototype.spot = function(x, y) {
    var pxl = this.get(x, y);
    pxl._count++;
  }

  Space.prototype.loop = function() {
    this._generation++;
    // Count all cells' neighborhood
    for (var x in this._sandbox) {
      var pxls = this._sandbox[x];
      for (var y in pxls) {
        var pxl = pxls[y];
        if (pxl._alive) {
          pxl.radioact(this, x, y);
        }
      }
    }

    var new_life = 0,
      new_die = 0;
    for (var x in this._sandbox) {
      var pxls = this._sandbox[x];
      for (var y in pxls) {
        var pxl = pxls[y];
        if (pxl._alive) {
          // Still live or to die
          pxl._alive = pxl.alive();
          if (!pxl._alive) new_die++;
        } else if (pxl._count == 3) {
          // Propagate
          pxl._alive = true;
          new_life++;
        }
        // Clear neighborhood counter for next loop.
        pxl._count = 0;

        // Keep alive cells' room and clear dead bodies.
        if (pxl._alive)
          this.alive_func(x, y);
        else
          delete pxls[y];
      }
      // If there is no one alive, clear whole this row.
      if (pxls.size == 0)
        this._sandbox.delete(x);
    }

    // Return whether falled in hung state.
    return new_life > 0 || new_die > 0;
  }
  Space.prototype.loopN = function(n = 1) {
    if (n == 1) return this.loop();

    var ret = false;
    var lf = this.alive_func;
    this.alive_func = this._idle;
    for (; n > 0; n--) {
      if (this.loop()) {
        ret = true;
        break;
      }
    }
    this.forEach(lf);
    this.alive_func = lf;

    return ret;
  }

  Space.prototype.forEach = function(f) {
    for (var x in this._sandbox) {
      var pxls = this._sandbox[x];
      for (var y in pxls) {
        if (pxls[y]._alive) f(x, y);
      }
    }
  }

  Space.prototype.dump = function() {
    var array = [];
    this.forEach(function(x, y) {
      array.push([x, y]);
    });
    return array;
  }

  function FlipH(e) {
    return [-e[0], e[1]];
  }
  exports.FlipH = FlipH;

  function FlipV(e) {
    return [e[0], -e[1]];
  }
  exports.FlipV = FlipV;

  // Clockwise rotate method
  function Rotate90(e) {
    return [e[1], -e[0]];
  }
  exports.Rotate90 = Rotate90;

  function Rotate180(e) {
    return [-e[0], -e[1]];
  }
  exports.Rotate180 = Rotate180;

  function Rotate270(e) {
    return [-e[1], e[0]];
  }
  exports.Rotate270 = Rotate270;

  // Samples variable
  var Samples = { stable: [], movers: [], oscillators: [] };
  exports.Samples = Samples;

  // Four points anchor: stone
  Samples.stable[0] = [[0, 0], [0, 1], [1, 0], [1, 1]];
  // Four points hollow anchor
  Samples.stable[1] = [[1, 0], [0, 1], [1, 2], [2, 1]];
  // <<
  Samples.stable[2] = [[0, 0], [0, 1], [1, 0], [2, 1], [1, 2]];
  // <>
  Samples.stable[3] = [[0, 0], [0, 1], [1, 0], [2, 1], [1, 2], [2, 2]];
  //-=-
  Samples.stable[4] = [[1, 0], [2, 0], [1, 2], [2, 2], [0, 1], [3, 1]];
  // Hollow square 4x4
  Samples.stable[6] = [[1, 0], [2, 0], [1, 3], [2, 3], [3, 1], [3, 2], [0, 1],
    [0, 2]];
  // Eater
  Samples.stable[5] = [[0, 0], [0, 1], [1, 0], [1, 2], [2, 2], [3, 2], [3,
  3]];

  // Pulse star
  // [[1,2],[2,1],[1,3],[3,1],[1,4],[4,1],[2,6],[6,2],[3,6],[6,3],[4,6],[6,4],
  //  [-1,2],[-2,1],[-1,3],[-3,1],[-1,4],[-4,1],[-2,6],[-6,2],[-3,6],[-6,3],[-4,6],[-6,4],
  //  [1,-2],[2,-1],[1,-3],[3,-1],[1,-4],[4,-1],[2,-6],[6,-2],[3,-6],[6,-3],[4,-6],[6,-4],
  //  [-1,-2],[-2,-1],[-1,-3],[-3,-1],[-1,-4],[-4,-1],[-2,-6],[-6,-2],[-3,-6],[-6,-3],[-4,-6],[-6,-4]]

  // 3 cells pulse
  Samples.oscillators[0] = [[0, 0], [1, 0], [-1, 0]];

  // Gosper Glider
  Samples.movers[0] = [[0, 0], [2, 0], [1, 1], [1, 2], [2, 1]];
  // Shuttle
  Samples.movers[1] = [[0, 0], [0, 2], [3, 0], [4, 1], [4, 2], [4, 3], [1, 3],
    [2, 3], [3, 3]];



  // Glider gun
  Samples.movers[3] = [[0, 5], [1, 5], [0, 6], [1, 6], [5, 5], [6, 4], [6, 6],
    [7, 3], [7, 7], [8, 4], [8, 5], [8, 6], [9, 2], [9, 3], [9, 7], [9, 8],
    [14, 3], [15, 3], [16, 3], [16, 5], [16, 6], [16, 7], [18, 8], [19, 8],
    [19, 7], [19, 5], [20, 5], [20, 6], [23, 5], [23, 6], [24, 5], [24, 6],
    [23, 1], [23, 0], [24, 0], [24, 1], [25, 1], [25, 2], [25, 3], [25, 4],
    [25, 5], [26, 2], [26, 4], [28, 2], [28, 3], [28, 4], [34, 4], [34, 3],
    [35, 3], [35, 4]];

  // Glider Gun Breeder
  Samples.movers[4] = [[-65, -74], [-65, -73], [-65, -72], [-65, -71],
    [-64, -75], [-64, -71], [-64, -58], [-64, -55], [-63, -71], [-63, -54],
    [-62, -75], [-62, -72], [-62, -58], [-62, -54], [-61, -57], [-61, -56],
    [-61, -55], [-61, -54], [-59, -81], [-58, -80], [-58, -61], [-58, -59],
    [-57, -82], [-57, -81], [-57, -80], [-57, -67], [-57, -66], [-57, -65],
    [-57, -63], [-57, -62], [-57, -58], [-56, -70], [-56, -69], [-56, -64],
    [-56, -63], [-56, -62], [-56, -61], [-56, -59], [-56, -57], [-56, -56],
    [-55, -72], [-55, -71], [-55, -65], [-55, -64], [-55, -63], [-55, -62],
    [-55, -61], [-55, -56], [-54, -86], [-54, -72], [-54, -71], [-54, -66],
    [-54, -60], [-54, -56], [-53, -85], [-53, -72], [-53, -71], [-53, -70],
    [-53, -69], [-53, -68], [-53, -59], [-53, -58], [-53, -57], [-52, -87],
    [-52, -86], [-52, -85], [-52, -70], [-52, -69], [-52, -59], [-51, -99],
    [-51, -98], [-51, -97], [-51, -96], [-51, -95], [-50, -100], [-50, -95],
    [-50, -65], [-50, -64], [-50, -58], [-50, -55], [-49, -95], [-49, -91],
    [-49, -66], [-49, -65], [-49, -64], [-49, -63], [-49, -54], [-48, -100],
    [-48, -96], [-48, -90], [-48, -66], [-48, -65], [-48, -63], [-48, -62],
    [-48, -58], [-48, -54], [-47, -98], [-47, -92], [-47, -91], [-47, -90],
    [-47, -71], [-47, -70], [-47, -64], [-47, -63], [-47, -57], [-47, -56],
    [-47, -55], [-47, -54], [-46, -86], [-46, -73], [-46, -72], [-46, -70],
    [-46, -69], [-45, -86], [-45, -77], [-45, -73], [-45, -72], [-45, -71],
    [-45, -70], [-44, -82], [-44, -81], [-44, -78], [-44, -76], [-44, -72],
    [-44, -71], [-43, -91], [-43, -90], [-43, -83], [-43, -80], [-43, -79],
    [-43, -75], [-43, -42], [-43, -41], [-43, -35], [-43, -34], [-43, -33],
    [-43, -32], [-42, -82], [-42, -81], [-42, -78], [-42, -76], [-42, -72],
    [-42, -71], [-42, -44], [-42, -43], [-42, -41], [-42, -40], [-42, -36],
    [-42, -32], [-41, -86], [-41, -77], [-41, -73], [-41, -72], [-41, -71],
    [-41, -70], [-41, -44], [-41, -43], [-41, -42], [-41, -41], [-41, -32],
    [-40, -86], [-40, -73], [-40, -72], [-40, -70], [-40, -69], [-40, -43],
    [-40, -42], [-40, -36], [-40, -33], [-39, -101], [-39, -71], [-39, -70],
    [-38, -100], [-38, -48], [-38, -47], [-38, -37], [-37, -102],
    [-37, -101], [-37, -100], [-37, -82], [-37, -81], [-37, -50], [-37, -49],
    [-37, -48], [-37, -47], [-37, -46], [-37, -37], [-37, -36], [-37, -35],
    [-36, -83], [-36, -82], [-36, -81], [-36, -80], [-36, -50], [-36, -49],
    [-36, -44], [-36, -38], [-36, -34], [-35, -83], [-35, -82], [-35, -80],
    [-35, -79], [-35, -50], [-35, -49], [-35, -43], [-35, -42], [-35, -41],
    [-35, -40], [-35, -39], [-35, -34], [-34, -81], [-34, -80], [-34, -48],
    [-34, -47], [-34, -42], [-34, -41], [-34, -40], [-34, -39], [-34, -37],
    [-34, -35], [-34, -34], [-33, -45], [-33, -44], [-33, -43], [-33, -41],
    [-33, -40], [-33, -36], [-32, -39], [-32, -37], [-30, -84], [-30, -59],
    [-29, -85], [-29, -84], [-29, -83], [-29, -61], [-29, -60], [-29, -35],
    [-29, -34], [-29, -33], [-29, -32], [-28, -86], [-28, -85], [-28, -82],
    [-28, -60], [-28, -59], [-28, -36], [-28, -32], [-27, -85], [-27, -84],
    [-27, -83], [-27, -82], [-27, -81], [-27, -53], [-27, -52], [-27, -51],
    [-27, -50], [-27, -32], [-27, -19], [-27, -18], [-26, -84], [-26, -83],
    [-26, -82], [-26, -81], [-26, -54], [-26, -50], [-26, -36], [-26, -33],
    [-26, -21], [-26, -20], [-26, -18], [-26, -17], [-26, -3], [-26, -2],
    [-25, -85], [-25, -84], [-25, -74], [-25, -50], [-25, -21], [-25, -20],
    [-25, -19], [-25, -18], [-25, -4], [-25, -3], [-25, -2], [-25, -1],
    [-24, -116], [-24, -84], [-24, -83], [-24, -82], [-24, -76], [-24, -75],
    [-24, -54], [-24, -51], [-24, -20], [-24, -19], [-24, -4], [-24, -3],
    [-24, -1], [-24, 0], [-23, -115], [-23, -83], [-23, -75], [-23, -74],
    [-23, -61], [-23, -58], [-23, -2], [-23, -1], [-22, -117], [-22, -116],
    [-22, -115], [-22, -89], [-22, -88], [-22, -87], [-22, -84], [-22, -57],
    [-21, -88], [-21, -87], [-21, -85], [-21, -84], [-21, -61], [-21, -57],
    [-20, -87], [-20, -86], [-20, -85], [-20, -81], [-20, -80], [-20, -71],
    [-20, -70], [-20, -60], [-20, -59], [-20, -58], [-20, -57], [-20, -21],
    [-20, -16], [-20, -15], [-19, -105], [-19, -104], [-19, -86],
    [-19, -82], [-19, -79], [-19, -72], [-19, -71], [-19, -65], [-19, -64],
    [-19, -63], [-19, -30], [-19, -22], [-19, -21], [-19, -20], [-19, -16],
    [-19, -15], [-19, -5], [-19, -4], [-18, -105], [-18, -104], [-18, -81],
    [-18, -80], [-18, -79], [-18, -76], [-18, -75], [-18, -74], [-18, -67],
    [-18, -66], [-18, -64], [-18, -63], [-18, -29], [-18, -28], [-18, -23],
    [-18, -22], [-18, -20], [-18, -19], [-18, -6], [-18, -3], [-17, -80],
    [-17, -72], [-17, -71], [-17, -65], [-17, -64], [-17, -63], [-17, -50],
    [-17, -49], [-17, -48], [-17, -30], [-17, -29], [-17, -24], [-17, -23],
    [-17, -22], [-17, -20], [-17, -19], [-17, -18], [-17, -6], [-17, -3],
    [-17, -2], [-16, -71], [-16, -70], [-16, -60], [-16, -59], [-16, -58],
    [-16, -57], [-16, -51], [-16, -50], [-16, -49], [-16, -48], [-16, -47],
    [-16, -24], [-16, -23], [-16, -22], [-16, -20], [-16, -19], [-16, -7],
    [-16, -4], [-16, -3], [-15, -61], [-15, -57], [-15, -51], [-15, -50],
    [-15, -49], [-15, -47], [-15, -46], [-15, -22], [-15, -20], [-15, -7],
    [-15, -6], [-15, -5], [-15, -4], [-14, -57], [-14, -48], [-14, -47],
    [-14, -35], [-13, -61], [-13, -58], [-13, -34], [-13, -33], [-12, -35],
    [-12, -34], [-12, -24], [-12, -23], [-12, -3], [-12, -2], [-11, -39],
    [-11, -26], [-11, -25], [-11, -23], [-11, -22], [-11, -12], [-11, -11],
    [-11, -10], [-11, -9], [-11, -4], [-11, -3], [-11, -2], [-11, -1],
    [-10, -48], [-10, -47], [-10, -39], [-10, -30], [-10, -26], [-10, -25],
    [-10, -24], [-10, -23], [-10, -13], [-10, -9], [-10, -4], [-10, -3],
    [-10, -1], [-10, 0], [-9, -83], [-9, -49], [-9, -46], [-9, -35],
    [-9, -34], [-9, -31], [-9, -29], [-9, -25], [-9, -24], [-9, -9], [-9, -2],
    [-9, -1], [-8, -106], [-8, -105], [-8, -84], [-8, -82], [-8, -76],
    [-8, -75], [-8, -49], [-8, -47], [-8, -44], [-8, -43], [-8, -36],
    [-8, -33], [-8, -32], [-8, -28], [-8, -13], [-8, -10], [-7, -107], [-7, -105],
    [-7, -84], [-7, -82], [-7, -77], [-7, -75], [-7, -54], [-7, -53], [-7, -52],
    [-7, -48], [-7, -35], [-7, -34], [-7, -31], [-7, -29], [-7, -25],
    [-7, -24], [-6, -107], [-6, -106], [-6, -83], [-6, -77], [-6, -76], [-6, -39],
    [-6, -30], [-6, -26], [-6, -25], [-6, -24], [-6, -23], [-5, -39], [-5, -26],
    [-5, -25], [-5, -23], [-5, -22], [-4, -24], [-4, -23], [1, -22], [1, -21],
    [2, -37], [2, -24], [2, -23], [2, -21], [2, -20], [3, -105], [3, -104],
    [3, -81], [3, -75], [3, -74], [3, -37], [3, -28], [3, -24], [3, -23],
    [3, -22], [3, -21], [4, -105], [4, -103], [4, -82], [4, -80], [4, -75],
    [4, -73], [4, -52], [4, -51], [4, -50], [4, -46], [4, -33], [4, -32],
    [4, -29], [4, -27], [4, -23], [4, -22], [5, -104], [5, -103], [5, -82],
    [5, -80], [5, -74], [5, -73], [5, -47], [5, -45], [5, -42], [5, -41],
    [5, -34], [5, -31], [5, -30], [5, -26], [5, -11], [5, -8], [6, -81],
    [6, -47], [6, -44], [6, -33], [6, -32], [6, -29], [6, -27], [6, -23],
    [6, -22], [6, -7], [6, 0], [6, 1], [7, -46], [7, -45], [7, -37], [7, -28],
    [7, -24], [7, -23], [7, -22], [7, -21], [7, -11], [7, -7], [7, -2],
    [7, -1], [7, 1], [7, 2], [8, -37], [8, -24], [8, -23], [8, -21], [8, -20],
    [8, -10], [8, -9], [8, -8], [8, -7], [8, -2], [8, -1], [8, 0], [8, 1],
    [9, -33], [9, -32], [9, -22], [9, -21], [9, -1], [9, 0], [10, -59], [10, -56],
    [10, -32], [10, -31], [11, -55], [11, -46], [11, -45], [11, -33], [12, -59],
    [12, -55], [12, -49], [12, -48], [12, -47], [12, -45], [12, -44], [12, -20],
    [12, -18], [12, -5], [12, -4], [12, -3], [12, -2], [13, -69], [13, -68],
    [13, -58], [13, -57], [13, -56], [13, -55], [13, -49], [13, -48], [13, -47],
    [13, -46], [13, -45], [13, -22], [13, -21], [13, -20], [13, -18], [13, -17],
    [13, -5], [13, -2], [13, -1], [14, -78], [14, -70], [14, -69], [14, -63],
    [14, -62], [14, -61], [14, -48], [14, -47], [14, -46], [14, -28], [14, -27],
    [14, -22], [14, -21], [14, -20], [14, -18], [14, -17], [14, -16], [14, -4],
    [14, -1], [14, 0], [15, -103], [15, -102], [15, -79], [15, -78], [15, -77],
    [15, -74], [15, -73], [15, -72], [15, -65], [15, -64], [15, -62], [15, -61],
    [15, -27], [15, -26], [15, -21], [15, -20], [15, -18], [15, -17], [15, -4],
    [15, -1], [16, -103], [16, -102], [16, -84], [16, -80], [16, -77], [16, -70],
    [16, -69], [16, -63], [16, -62], [16, -61], [16, -28], [16, -20], [16, -19],
    [16, -18], [16, -14], [16, -13], [16, -3], [16, -2], [17, -113], [17, -85],
    [17, -84], [17, -83], [17, -79], [17, -78], [17, -69], [17, -68], [17, -58],
    [17, -57], [17, -56], [17, -55], [17, -19], [17, -14], [17, -13], [18, -113],
    [18, -112], [18, -86], [18, -85], [18, -83], [18, -82], [18, -59], [18, -55],
    [19, -114], [19, -112], [19, -87], [19, -86], [19, -85], [19, -82], [19, -55],
    [20, -81], [20, -73], [20, -72], [20, -59], [20, -56], [20, 0], [20, 1],
    [21, -82], [21, -81], [21, -80], [21, -74], [21, -73], [21, -52], [21, -49],
    [21, -18], [21, -17], [21, -2], [21, -1], [21, 1], [21, 2], [22, -83],
    [22, -82], [22, -72], [22, -48], [22, -19], [22, -18], [22, -17], [22, -16],
    [22, -2], [22, -1], [22, 0], [22, 1], [23, -82], [23, -81], [23, -80],
    [23, -79], [23, -52], [23, -48], [23, -34], [23, -31], [23, -19], [23, -18],
    [23, -16], [23, -15], [23, -1], [23, 0], [24, -83], [24, -82], [24, -81],
    [24, -80], [24, -79], [24, -51], [24, -50], [24, -49], [24, -48], [24, -30],
    [24, -17], [24, -16], [25, -84], [25, -83], [25, -80], [25, -58], [25, -57],
    [25, -34], [25, -30], [26, -83], [26, -82], [26, -81], [26, -59], [26, -58],
    [26, -33], [26, -32], [26, -31], [26, -30], [27, -82], [27, -57], [29, -37],
    [29, -35], [30, -43], [30, -42], [30, -41], [30, -39], [30, -38], [30, -34],
    [31, -79], [31, -78], [31, -46], [31, -45], [31, -40], [31, -39], [31, -38],
    [31, -37], [31, -35], [31, -33], [31, -32], [32, -98], [32, -81], [32, -80],
    [32, -78], [32, -77], [32, -48], [32, -47], [32, -41], [32, -40], [32, -39],
    [32, -38], [32, -37], [32, -32], [33, -98], [33, -97], [33, -81], [33, -80],
    [33, -79], [33, -78], [33, -48], [33, -47], [33, -42], [33, -36], [33, -32],
    [34, -99], [34, -97], [34, -80], [34, -79], [34, -48], [34, -47], [34, -46],
    [34, -45], [34, -44], [34, -35], [34, -34], [34, -33], [35, -46], [35, -45],
    [35, -35], [36, -68], [36, -67], [36, -66], [36, -65], [37, -79], [37, -69],
    [37, -65], [37, -41], [37, -40], [37, -34], [37, -31], [38, -78], [38, -77],
    [38, -65], [38, -42], [38, -41], [38, -40], [38, -39], [38, -30], [39, -81],
    [39, -80], [39, -79], [39, -73], [39, -72], [39, -69], [39, -66], [39, -42],
    [39, -41], [39, -39], [39, -38], [39, -34], [39, -30], [40, -82], [40, -81],
    [40, -80], [40, -73], [40, -72], [40, -71], [40, -40], [40, -39], [40, -33],
    [40, -32], [40, -31], [40, -30], [41, -81], [41, -80], [41, -79], [41, -73],
    [41, -72], [41, -69], [41, -66], [42, -88], [42, -78], [42, -77], [42, -65],
    [43, -88], [43, -87], [43, -79], [43, -69], [43, -65], [43, -52], [43, -51],
    [44, -94], [44, -89], [44, -87], [44, -68], [44, -67], [44, -66], [44, -65],
    [44, -61], [44, -60], [44, -59], [44, -58], [44, -53], [44, -52], [44, -51],
    [44, -50], [45, -96], [45, -92], [45, -62], [45, -58], [45, -53], [45, -52],
    [45, -50], [45, -49], [46, -91], [46, -58], [46, -51], [46, -50], [47, -96],
    [47, -91], [47, -83], [47, -62], [47, -59], [48, -95], [48, -94], [48, -93],
    [48, -92], [48, -91], [48, -83], [48, -82], [49, -84], [49, -82], [50, -70],
    [50, -69], [50, -68], [50, -54], [50, -53], [51, -71], [51, -70], [51, -69],
    [51, -68], [51, -54], [51, -52], [52, -78], [52, -71], [52, -67], [52, -54],
    [52, -52], [52, -51], [53, -78], [53, -77], [53, -70], [53, -69], [53, -68],
    [53, -53], [53, -52], [54, -79], [54, -77], [54, -70], [54, -69], [54, -68],
    [54, -64], [54, -63], [54, -53], [55, -64], [55, -63], [57, -52], [57, -51],
    [58, -53], [58, -52], [58, -51], [58, -50], [59, -53], [59, -52], [59, -50],
    [59, -49], [60, -68], [60, -67], [60, -51], [60, -50], [61, -70], [61, -69],
    [61, -67], [61, -66], [62, -70], [62, -69], [62, -68], [62, -67], [63, -69],
    [63, -68]];
})();
